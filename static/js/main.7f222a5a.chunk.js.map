{"version":3,"sources":["components/card/card.js","components/cardList/cardList.js","components/search/search.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","CardList","monsters","map","key","Search","type","placeholder","onChange","handleChange","App","state","searchStr","fetch","then","response","json","monstersArray","setState","searchedMonsters","this","filter","toLowerCase","includes","e","target","value","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+VAYeA,MATf,SAAcC,GACZ,OACE,yBAAKC,UAAU,QACb,yBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,QAAkDC,IAAI,WAC9D,gCAAQL,EAAMG,QAAQG,KAAtB,OCSSC,EAZD,SAACP,GAEb,OACE,yBAAKC,UAAU,YACZD,EAAMQ,SAASC,KAAI,SAAAN,GAAO,OAAE,kBAAC,EAAD,CAAMA,QAASA,EAASO,IAAKP,EAAQC,UCOzDO,G,MAXJ,SAACX,GAEV,OACE,2BACEY,KAAK,SACLC,YAAab,EAAMa,YACnBC,SAAUd,EAAMe,iBCwCHC,E,kDA1Cf,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXT,SAAU,GACVU,UAAW,IAJD,E,gEAQO,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAa,OAAI,EAAKC,SAAS,CACnChB,SAAUe,S,+BAaN,IAAD,OACDE,EAAiBC,KAAKT,MAAMT,SAASmB,QAAO,SAAAxB,GAAO,OAAEA,EAAQG,KAAKsB,cAAcC,SAAS,EAAKZ,MAAMC,UAAUU,kBAElH,OACE,yBAAK3B,UAAU,OACb,gDACA,kBAAC,EAAD,CACEY,YAAY,kBACZE,aAAc,SAACe,GAAD,OAAK,EAAKN,SAAS,CAACN,UAAUY,EAAEC,OAAOC,WAEvD,kBAAC,EAAD,CAAUxB,SAAWiB,S,GApCfQ,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7f222a5a.chunk.js","sourcesContent":["import React  from 'react'\r\nimport './card.css'\r\n\r\nfunction Card(props){\r\n  return (\r\n    <div className='Card'>\r\n      <img src={`https://robohash.org/${props.monster.id}.png`} alt='robots'/>\r\n      < h2 > {props.monster.name} < /h2>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card\r\n","import React from 'react'\r\nimport './cardList.css'\r\nimport Card from '../card/card'\r\n\r\nlet CardList =(props)=>{\r\n\r\n  return(\r\n    <div className='CardList'>\r\n      {props.monsters.map(monster=><Card monster={monster} key={monster.id}/>)}\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\nexport default CardList\r\n","import React from 'react'\r\nimport './search.css'\r\n\r\n\r\nlet Search=(props)=>{\r\n\r\n  return(\r\n    <input\r\n      type='search'\r\n      placeholder={props.placeholder}\r\n      onChange={props.handleChange}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Search\r\n","import React from 'react';\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\nimport CardList from \"./components/cardList/cardList\"\r\nimport Search from './components/search/search'\r\n\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n      super();\r\n      this.state = {\r\n        monsters: [],\r\n        searchStr: ''\r\n      }\r\n    }\r\n\r\n    componentDidMount() {\r\n      fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(monstersArray => this.setState({\r\n          monsters: monstersArray\r\n        }))\r\n    }\r\n\r\n    //   render(){\r\n    //\r\n    //     return(\r\n    //       <div className='monsList'>\r\n    //         {this.state.monsters.map((item)=><h1 key={item.id}>{item.name}</h1>)}\r\n    //       </div>\r\n    //     )\r\n    //   }\r\n    // }\r\n    render() {\r\n        let searchedMonsters=this.state.monsters.filter(monster=>monster.name.toLowerCase().includes(this.state.searchStr.toLowerCase()))\r\n        // console.log(searchedMonsters);\r\n        return (\r\n          <div className='App'>\r\n            <h1>Monsters Rolodex</h1>\r\n            <Search\r\n              placeholder='search monsters'\r\n              handleChange={(e)=>this.setState({searchStr:e.target.value})}\r\n            />\r\n            <CardList monsters= {searchedMonsters} />\r\n          </div>\r\n        )\r\n      }\r\n    }\r\n\r\n\r\n    export default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}